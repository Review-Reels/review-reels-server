// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  username      String?         @unique
  merchantName  String          @default("")
  name          String?
  password      String?
  picture       String?
  authType      String          @default("native")
  createdAt     DateTime        @default(now())
  ReviewRequest ReviewRequest[]
}

model ReviewRequest {
  id             String           @id @default(uuid())
  name           String           @default("")
  askMessage     String?
  videoUrl       String
  imageUrl       String           @default("")
  size           Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  user           User             @relation(fields: [userId], references: [id])
  userId         String
  ReviewResponse ReviewResponse[]
  EmailTracker   EmailTracker[]
}

model ReviewResponse {
  id               String         @id @default(uuid())
  customerName     String
  whatYouDo        String?
  videoUrl         String
  imageUrl         String         @default("")
  size             Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now())
  isRead           Boolean        @default(false)
  requestMessage   ReviewRequest  @relation(fields: [requestMessageId], references: [id])
  requestMessageId String
  EmailTracker     EmailTracker[]
}

model EmailTracker {
  id               String         @id @default(uuid())
  emailId          String
  customerName     String
  subject          String?        @default("")
  status           Boolean
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now())
  reviewResponse   ReviewResponse @relation(fields: [reviewResponseId], references: [id])
  reviewResponseId String
  ReviewRequest    ReviewRequest? @relation(fields: [reviewRequestId], references: [id])
  reviewRequestId  String?
}
